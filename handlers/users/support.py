# –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏ –æ–±—Ä–∞—Ç–Ω–æ
from time import sleep

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from data.config import support_ids
from keyboards.inline.support import support_keyboard, support_callback
from loader import dp, bot
from state.invite import Invite


@dp.message_handler(Command("invite"))
async def ask_support(message: types.Message, state: FSMContext):
    await message.answer(" –í–≤–µ–¥–∏—Ç–µ id –¥–ª—è —Ç–æ–≥–æ,—á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞: ")
    await Invite.unique_id.set()
    # await state.update_data(reply1=message.text)


@dp.message_handler(state=Invite.unique_id)
async def invite2(message: types.Message, state: FSMContext):
    await state.update_data(reply1=message.text)
    data = await state.get_data()
    support_ids.append(data.get("reply1"))
    keyboards = await support_keyboard(messages="one")
    await message.answer("–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å...", reply_markup=keyboards)
    await state.finish()


@dp.callback_query_handler(support_callback.filter(messages="one"))
async def send_to_support(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.answer()
    user_id = int(callback_data.get("user_id"))
    await call.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,–∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è c –¥—Ä—É–≥–æ–º")
    await state.set_state("wait_for_support_message")  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(second_id=user_id)  # —ç—Ç–æ id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞


@dp.message_handler(state="wait_for_support_message", content_types=types.ContentType.ANY)
async def get_support_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    second_id = data["second_id"]

    # user_id = message.from_user.username
    # if (user_id == None):
    #     await message.answer("–ü–æ—Ä–æ–π—Ç–µ—Å—å –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!")
    #     await message.answer_photo(open("photo/tg_1.png", "rb"), caption="–ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    #     await message.answer_photo(open("photo/tg_2.png", "rb"), caption="–ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å")
    #     await message.answer_photo(open("photo/tg_3.png", "rb"), caption="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –∏–º—èüëå")
    # await bot.send_message(second_id,
    #                        f"–í–∞–º –ø–∏—Å—å–º–æ –æ—Ç t.me/{message.from_user.username} {message.from_user.id}.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüòâ")

    keyboard = await support_keyboard(messages="one", user_id=message.from_user.id)
    await message.send_copy(second_id, reply_markup=keyboard) #copy_to
    await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    await state.reset_state()  # –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è


@dp.message_handler(Command("accept"))
async def accept(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_friend = support_ids
    await message.reply(f"–≠—Ç–∏ –¥–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω—ã:\n"
                        f"{user_id} - –í—ã,\n"
                        f"{','.join(user_friend)} - –í–∞—à –¥—Ä—É–≥")
